import math
data = """.#..#..###
####.###.#
....###.#.
..###.##.#
##.##.#.#.
....###..#
..#.#..#.#
#..#.#.###
.##...##.#
.....#.#.."""

data = """..............#.#...............#....#....
#.##.......#....#.#..##........#...#......
..#.....#....#..#.#....#.....#.#.##..#..#.
...........##...#...##....#.#.#....#.##..#
....##....#...........#..#....#......#.###
.#...#......#.#.#.#...#....#.##.##......##
#.##....#.....#.....#...####........###...
.####....#.......#...##..#..#......#...#..
...............#...........#..#.#.#.......
........#.........##...#..........#..##...
...#..................#....#....##..#.....
.............#..#.#.........#........#.##.
...#.#....................##..##..........
.....#.#...##..............#...........#..
......#..###.#........#.....#.##.#......#.
#......#.#.....#...........##.#.....#..#.#
.#.............#..#.....##.....###..#..#..
.#...#.....#.....##.#......##....##....#..
.........#.#..##............#..#...#......
..#..##...#.#..#....#..#.#.......#.##.....
#.......#.#....#.#..##.#...#.......#..###.
.#..........#...##.#....#...#.#.........#.
..#.#.......##..#.##..#.......#.###.......
...#....###...#......#..#.....####........
.............#.#..........#....#......#...
#................#..................#.###.
..###.........##...##..##.................
.#.........#.#####..#...##....#...##......
........#.#...#......#.................##.
.##.....#..##.##.#....#....#......#.#....#
.....#...........#.............#.....#....
........#.##.#...#.###.###....#.#......#..
..#...#.......###..#...#.##.....###.....#.
....#.....#..#.....#...#......###...###...
#..##.###...##.....#.....#....#...###..#..
........######.#...............#...#.#...#
...#.....####.##.....#X...##..............
###..#......#...............#......#...#..
#..#...#.#........#.#.#...#..#....#.#.####
#..#...#..........##.#.....##........#.#..
........#....#..###..##....#.#.......##..#
.................##............#.......#.."""

data_ = """.#..##.###...#######
##.############..##.
.#.######.########.#
.###.#######.####.#.
#####.##.#.##.###.##
..#####..#.#########
####################
#.####....###.#.#.##
##.#################
#####.##.###..####..
..######..##.#######
####.##.####...##..#
.#####..#.######.###
##...#.##########...
#.##########.#######
.####.#.###.###.#.##
....##.##.###..#####
.#.#.###########.###
#.#.#.#####.####.###
###.##.####.##.#..##"""

data = [[x for x in y] for y in data.split('\n')]

print(data)

asts = []

ppp = 42

for x in range(0, ppp):
    for y in range(0, ppp):
        if data[x][y] == '#':
            asts.append((x, y))


# max_nb = 0
#
# for x in range(0, ppp):
#     for y in range(0, ppp):
#
#         if (x, y) in asts:
#
#             nb_ok = 0
#
#             angles = []
#
#             for ox, oy in asts:
#                 if (x, y) != (ox, oy):
#                     dx = (x - ox)
#                     dy = (y - oy)
#                     # print((dx, dy), end='')
#
#                     if dx > 0 and dy > 0:
#                         q = 1
#                     elif dx > 0 and dy < 0:
#                         q = 2
#                     elif dx < 0 and dy < 0:
#                         q = 3
#                     else:
#                         q = 4
#
#                     if dx == 0:
#                         q = 1 if dy > 0 else -1
#                         dy = 1
#
#                     elif dy == 0:
#                         q = 1 if dx > 0 else -1
#                         dx = 1
#
#                     elif dx > dy:
#                         dy = dy / dx
#                         dx = 1
#
#                     else:
#                         dx = dx / dy
#                         dy = 1
#
#                     dx = float(dx)
#                     dy = float(dy)
#
#                     # print("--->", end='')
#                     # print((dx, dy))
#
#                     if (dx, dy, q) not in angles:
#                         # if (x, y) == (2, 3):
#                         #     print("OK   ", end='')
#                         #     print((ox, oy))
#                         angles.append((dx, dy, q))
#                     else:
#                         pass
#                         # if (x, y) == (2, 3):
#                         #     print("NOTOK", end='')
#                         #     print((ox, oy))
#
#             # print(angles)
#
#             print(len(angles), end='')
#             if max_nb < len(angles):
#                 max_loc = (x, y)
#                 max_nb = len(angles)
#         else:
#             print('-', end='')
#     print('')
#
# print(max_nb)
# print(max_loc)

x, y = (36, 26)
# x, y = (13, 11)


nb_destoryed = 0

while True:

    angles = {}

    for ox, oy in asts:
        if (x, y) != (ox, oy):
            dx = (x - ox)
            dy = (y - oy)
            # print((dx, dy), end='')

            if dx > 0 and dy > 0:
                q = 1
            elif dx > 0 and dy < 0:
                q = 2
            elif dx < 0 and dy < 0:
                q = 3
            else:
                q = 4

            if dx == 0:
                q = 1 if dy > 0 else -1
                dy = 1

            elif dy == 0:
                q = 1 if dx > 0 else -1
                dx = 1

            elif dx > dy:
                dy = dy / dx
                dx = 1

            else:
                dx = dx / dy
                dy = 1

            dx = float(dx)
            dy = float(dy)

            # print("--->", end='')
            # print((dx, dy))

            k = (dx, dy, q)

            if k not in angles:
                angles[k] = (ox, oy)
            else:
                oox, ooy = angles[k]

                d1 = math.sqrt((x - ox) ** 2 + (y - oy) ** 2)
                d2 = math.sqrt((x - oox) ** 2 + (y - ooy) ** 2)

                if d1 < d2:
                    angles[k] = (ox, oy)

    print(len(angles))

    an = []
    for ox, oy in angles.values():
        a = math.degrees(math.atan2(oy-y, x-ox))
        if a < 0:
            a += 360
        an.append((a, (ox, oy)))

    an = sorted(an, key=lambda a: a[0])
    for _ in an:
        print(_)
    print(an[199])
    print(an[199][1][1] * 100 + an[199][1][0])

    break


bx, by = 2, 2
tx, ty = 2, 0

print(math.degrees(math.atan2(tx-bx, by-ty)))
