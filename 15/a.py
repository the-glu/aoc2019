import sys
sys.path.append("..")
from intcode import IC
from collections import defaultdict


states_ = [int(x) for x in "3,1033,1008,1033,1,1032,1005,1032,31,1008,1033,2,1032,1005,1032,58,1008,1033,3,1032,1005,1032,81,1008,1033,4,1032,1005,1032,104,99,1002,1034,1,1039,102,1,1036,1041,1001,1035,-1,1040,1008,1038,0,1043,102,-1,1043,1032,1,1037,1032,1042,1106,0,124,1002,1034,1,1039,1001,1036,0,1041,1001,1035,1,1040,1008,1038,0,1043,1,1037,1038,1042,1105,1,124,1001,1034,-1,1039,1008,1036,0,1041,1001,1035,0,1040,1002,1038,1,1043,101,0,1037,1042,1105,1,124,1001,1034,1,1039,1008,1036,0,1041,102,1,1035,1040,1001,1038,0,1043,101,0,1037,1042,1006,1039,217,1006,1040,217,1008,1039,40,1032,1005,1032,217,1008,1040,40,1032,1005,1032,217,1008,1039,1,1032,1006,1032,165,1008,1040,9,1032,1006,1032,165,1102,1,2,1044,1105,1,224,2,1041,1043,1032,1006,1032,179,1102,1,1,1044,1106,0,224,1,1041,1043,1032,1006,1032,217,1,1042,1043,1032,1001,1032,-1,1032,1002,1032,39,1032,1,1032,1039,1032,101,-1,1032,1032,101,252,1032,211,1007,0,35,1044,1106,0,224,1101,0,0,1044,1105,1,224,1006,1044,247,102,1,1039,1034,1002,1040,1,1035,1002,1041,1,1036,102,1,1043,1038,101,0,1042,1037,4,1044,1105,1,0,1,5,41,19,22,1,39,81,29,20,15,82,33,18,45,30,32,55,28,26,70,13,56,32,28,18,3,59,90,11,95,15,85,8,61,25,59,24,34,1,85,5,25,54,57,18,20,54,80,91,28,65,36,12,44,36,13,92,24,56,13,39,69,29,79,10,41,27,23,25,72,20,3,61,15,51,11,12,12,48,10,45,13,29,49,90,30,17,9,41,21,18,7,30,48,17,83,71,4,10,31,10,96,81,77,9,50,39,21,36,33,72,12,3,23,79,18,4,75,17,58,64,8,7,97,60,72,72,1,94,55,42,2,94,2,21,88,19,82,57,96,19,25,27,41,62,15,40,23,61,86,27,73,61,13,46,52,81,12,34,23,73,23,59,1,30,47,9,99,10,37,17,28,98,5,92,73,8,63,4,86,76,79,7,30,68,28,91,12,12,98,74,4,22,44,10,23,45,37,16,90,76,23,74,75,12,21,38,14,15,76,28,49,71,7,6,6,71,53,33,12,87,15,92,66,21,38,13,53,92,34,49,25,6,67,21,27,89,24,61,25,30,41,30,99,28,19,41,90,51,74,14,33,54,48,10,14,42,2,67,76,10,21,2,67,43,27,69,11,16,78,7,36,9,24,48,63,81,53,29,94,34,25,99,66,47,17,97,33,52,11,62,22,52,30,23,89,95,15,13,50,48,26,10,6,69,78,13,6,94,1,28,67,10,70,16,50,19,24,15,79,50,27,3,19,62,4,31,83,20,17,83,67,5,80,26,36,62,87,3,10,80,22,65,60,10,78,4,20,60,30,11,7,83,10,13,72,81,37,22,14,55,63,51,27,32,77,52,20,50,16,48,2,55,10,53,26,84,6,87,43,37,26,3,85,62,25,78,50,16,10,37,22,54,5,80,24,7,32,49,18,27,12,41,70,82,20,34,91,15,98,77,22,6,79,3,8,54,17,32,4,44,2,97,14,15,65,30,97,14,79,75,11,77,5,61,37,20,91,20,45,74,19,40,2,41,89,12,34,44,18,62,57,17,68,22,96,7,59,63,2,60,70,2,26,75,26,3,53,19,80,16,97,7,34,58,52,66,24,75,25,30,75,42,13,12,89,13,3,84,92,1,75,30,54,43,2,56,15,1,15,84,99,6,98,42,17,29,1,18,26,70,71,29,91,23,21,87,66,18,38,32,18,81,65,2,58,99,12,4,84,24,32,88,30,67,49,29,59,64,18,70,10,24,56,5,27,97,50,4,28,85,65,16,67,83,15,16,61,18,86,8,36,25,36,29,97,45,19,81,41,29,45,30,69,26,57,93,27,72,34,30,99,61,2,48,16,12,76,98,28,14,32,32,90,48,10,30,57,23,39,2,8,39,33,13,88,34,31,74,15,60,8,47,60,31,5,79,1,98,86,33,3,99,33,62,11,96,25,22,38,98,84,3,56,70,49,3,8,56,87,4,29,59,65,26,34,77,7,14,78,26,25,70,49,3,31,45,92,24,95,17,4,9,4,96,64,92,27,67,4,99,6,44,7,16,86,2,75,1,6,68,81,4,1,44,49,7,92,8,40,36,25,81,13,56,99,10,2,30,72,6,43,30,12,43,93,19,20,23,95,10,19,66,63,28,96,40,50,8,15,56,38,13,93,42,71,12,18,87,8,4,21,85,9,2,66,77,10,80,26,61,9,43,20,88,10,39,67,55,31,49,17,58,26,80,20,84,54,49,5,73,11,52,15,63,7,62,24,57,92,61,25,87,56,37,31,38,14,99,0,0,21,21,1,10,1,0,0,0,0,0,0".split(',')]


ic = IC(states_)

pos = (0, 0)

ma = {(0, 0): '.'}
org_move = {}
move = 0
d = None
dist = 0

mode = 9

closest_paths_to_zero = defaultdict(lambda: [])
current_path = [3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 1, 1, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 2, 2, 4, 4, 1, 1, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 3, 3, 2, 2, 3, 3, 3, 3, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 4, 4, 2, 2, 2, 2, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 2, 2, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 1, 1, 4, 4, 1, 1, 3, 3, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2]

to_visit = []


def i():

    global pos, ma, org_move, move, d, dist, mode, closest_paths_to_zero, current_path

    if mode < 8:
        mode += 1

    if mode == 1:  # Check N
        d = 1
        return 1
    elif mode == 2:  # Back
        d = 2
        return 2
    elif mode == 3:  # Check S
        d = 2
        return 2
    elif mode == 4:  # Back
        d = 1
        return 1
    elif mode == 5:  # Check W
        d = 3
        return 3
    elif mode == 6:  # Back
        d = 4
        return 4
    elif mode == 7:  # Check E
        d = 4
        return 4
    elif mode == 8:  # Back
        d = 3
        return 3
    elif mode == 9:  # Move to next
        d = current_path.pop(0)
        return d


def o(v):

    global pos, ma, org_move, move, d, dist, mode, closest_paths_to_zero, current_path, to_visit

    if d == 1:
        dpost = (pos[0] + 1, pos[1])
    elif d == 2:
        dpost = (pos[0] - 1, pos[1])
    elif d == 3:
        dpost = (pos[0], pos[1] + 1)
    elif d == 4:
        dpost = (pos[0], pos[1] - 1)

    if v == 0:

        ma[dpost] = '#'

        if mode == 9:
            print("ERROR GOING DEST")
            sys.exit(1)
        elif mode in [1, 3, 5, 7]:
            mode += 1  # Skip going back

    if v in [1, 2]:

        ma[dpost] = '.'

        if mode in [1, 3, 5, 7]:

            if dpost not in closest_paths_to_zero or len(closest_paths_to_zero[dpost]) > len(closest_paths_to_zero[pos]) + 1:

                closest_paths_to_zero[dpost] = closest_paths_to_zero[pos] + [d]

                if dpost not in to_visit:
                    to_visit.append(dpost)

        pos = dpost

    elif v == 2:
        print(len(closest_paths_to_zero[pos]) + 1)

        for x in range(min([p[0] for p in ma.keys()]), max([p[0] for p in ma.keys()]) + 1):
            for y in range(min([p[1] for p in ma.keys()]), max([p[1] for p in ma.keys()]) + 1):
                if (x, y) in ma:
                    print(ma[(x, y)], end='')
                else:
                    print(' ', end='')
            print('')


        closest_paths_to_zero[dpost] = closest_paths_to_zero[pos] + [d]
        print(closest_paths_to_zero[dpost])
        print(dpost)

        sys.exit(0)

    if mode == 8:

        for x in range(min([p[0] for p in ma.keys()]), max([p[0] for p in ma.keys()]) + 1):
            for y in range(min([p[1] for p in ma.keys()]), max([p[1] for p in ma.keys()]) + 1):
                if (x, y) == pos:
                    print('!', end='')
                elif (x, y) in ma:
                    print(ma[(x, y)], end='')
                else:
                    print(' ', end='')
            print('')

        print("Done checking {} ({})".format(pos, v))

        mode = 9

        for x in closest_paths_to_zero[pos][::-1]:
            if x == 1:
                current_path.append(2)
            if x == 2:
                current_path.append(1)
            if x == 3:
                current_path.append(4)
            if x == 4:
                current_path.append(3)

        if not to_visit:
            print(max([len(x) for x in closest_paths_to_zero.values()]))
            sys.exit(1)

        n = to_visit.pop()

        print("Going to {}".format(n))

        current_path += closest_paths_to_zero[n]

        # print(current_path)

    elif mode == 9 and not current_path:
        mode = 0


ic.set_in(i)
ic.set_out(o)
ic.run()


