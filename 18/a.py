data = """#################################################################################
#...#.......#...U...#.....#...........#.#.....#.......#...#...#.......#.........#
#.###.#.#####.###.#.#.#####.###.#####.#.#.###.#.#.###H#.#.#.###.#.#####.#######.#
#p..#.#...#...#.#.#...#......c#.#...#...#...#.#.#.#.....#.#.#...#...#...#...#...#
#.#.#N###.#.###.#.#####.#######.#.#.###.###.#.#.#.#######.#I#.#####.#.###.#.#.#.#
#.#.#...#.......#.#.....#.....#...#.#...#...#.#.#.#.....#.#.#.#...#...#...#.#.#.#
###.###.#########.#.#####.###.#####.#.###.###.###.#.###.#.#.#.#.#.#######.#.#.###
#...#...#.#.T.#...#...#...#.#.......#...#...#.....#...#.#...#...#.#..q..#.#.#...#
#.###.###.#.#.#.###.###.###.###.#######.#.#.#########.#.#########.#.###.#.#.###.#
#.#...#...#.#...#...#...#...#...#...#...#.#.........#.#.........#...#.#...#...#.#
#.#.#####.#.#####.###.###.###.###.#.###.#.#########.#.#######.#######.#######.#.#
#...#.....#.....#.#.#...#..b..#...#e..#.#.#...#...#...#.....#.......#.....#...#.#
#.###.###.#####.#.#.###.#######.#####.#.#.#.###.#.#######.#.#######.#.###.#B###.#
#.#...#.#.#...#.#.....#.............#.#.#.#.....#.........#.W.....#.#.#.#.....#.#
#.###.#.#.#.#.#.#####.###############.#.#.#########.#.#######.#####.#.#.#######.#
#.....#...#.#.#...#...#.....#.........#.#.....#...#.#...#.....#...#.#.#.....#...#
#######.###.#K###.#.###.#####.#########.#####.#.#.#####.#######.#.#.#.#.#.#.#.#.#
#.......#...#...#...#.......#...#...#.#.#.#...#.#.......#....d#g#.#...#.#.#.#.#.#
#.#######.#####.#########.#.###.#A#.#.#.#.#.###.#######.#.###.#.#.###.###.###.#.#
#.#...#...#...#.#.......#.#.#...#.#.#...#...#...#.......#.#...#.#...#.#...#...#.#
#.#.#.###.#.###.###.###.###.#.#.#.#.#####.###.#.#########.#.###.###.#.#.#.#.###.#
#...#.....#.....#...#.#.#...#.#.#.#.#...#.#...#.....#...#.#...#.#...#...#.#...#j#
###########.#####.###.#.#.#.#.#.#.#.#.#.#.#######.#.#.#.#.#####.#V###########.###
#.....#.F...#..m..#...#...#.#.#.#.#...#.#.......#.#.#.#.#.#..r#.#.#.........#...#
###Y#.#.#####.###.#.#####.###.###.#####.#######.#.#.#.#.#.#.#.#.#.###.#####.###.#
#...#.#...#...#v#.#.....#.#...#...#.L...#...#...#.#...#.#...#...#...#.#...#.#...#
#.#.#####.#.###.#.#####.###.###.###.###.#.###.#########.###########.#.#.###.#.#.#
#.#.#.....#.#.....#...#...#.......#.#.#.#.....#.......#.........#...#.#...#.#.#.#
#.#.#.#####X#.#####.#.###.#.#######.#.#.#.#####.#####.#.#########.###.###.#.#.#.#
#.#.#.......#.......#.#...#...#.....#...#.#.......#...#.....#.....#...Z.#...#.#.#
#.###################.#.#####.#.#####.###.#######.#.###.###.#.#####.###.#.###.#.#
#.#..............y..#.#.....#.#.#...#...#.........#.#...#...#.#...#.#.#.#.....#.#
#.#D###.###########.#.#####.###.#.#####.###########.#####.#.#.###.#.#.#.###.#####
#.#.#...#...........#.#.....#...#.....#.#..s....#...#...#.#.#...#...#.#...#.#...#
#.#.#.#######.#######.#.#####.###.###.#.#.###.###.###.#.#.#.###.#.###.###.###.#.#
#...#.#.....#.#.......#.#.....#.#.#.#.#.#...#.....#...#...#.#...#.......#k..#.#.#
#.###.#.###.#.#.#######.#.#.###.#.#.#.#.###.#######.#####.###.#############.#.#.#
#...#.R.#...#.#...#...#.#.#...#.#...#...#...#.......#.#...#...#.....#.....#...#.#
###.#####.#######.###.#.#####.#.###.#####.#######.###.#.###.###.###.#.###.#####.#
#.......#.....G.......#.......#........@#@........#.......#.....#..x..#......f..#
#################################################################################
#...#o..........#...#.................#@#@......#.....#...................#.....#
#.###.#.#######.#.#.#.###############.#.#.#.#####.#.#.#.#############.###.#.###.#
#.....#.#.....#.#.#...#.....#.......#.#.#.#.......#.#.#.....#.......#...#...#...#
#.#####.###.###.#.#####.#####.#####.#.#.#.#########.#######.#.#####.#########.#.#
#.#...#...#...#.#...#...#.....#.#...#...#.#.......#.........#.#.#...#.......#.#.#
#.###.###.###.#.###.#.#.#.#####.#.#####.#.#######.###########.#.#.###.#####.#.#.#
#...#...#...#.#.#...#.#.#...#...#.......#...#.....#.....#.....#.......#...#.#.#.#
###.#.#.###.#.#.#.###.#####.#.#.###########.#.#####.###.#.#.###########.#.#.#.###
#.....#.#...#.#...#.#.......#.#.........#...#.......#...#.#.#...#.......#.#.#...#
#########.###.#####.#.#########.#######.#.###.#######.###.###.#.###.#.#####.#.#.#
#.......#.#.....#.....#.......#.#.....#.#.#.#...#...#...#.....#...#.#.#.....#.#.#
#.#####.#.#.###.#.#########.#.#.#.###.#.#.#.###.###.###.#########.#.#.#.#######.#
#...#.....#.#.#...#.......#.#...#.#.#...#.#...#.......#...#.....#.#.#.#.#.......#
#.#.#######.#.#####.#####.#.#####.#.#####.#.#########.###.#.###.#.###.#.#.###.#O#
#.#.#...#.....#.....#...#...#..i#.#...#.#.#.........#.#...#.#...#.#...#.#.#...#.#
###.#.#.#####.###.#####.#####.###.#.#.#.#.###.#.#####.#.###.#.###.#.###.#.#.###.#
#...#.#...#.......#.........#.....#.#.#.#...#.#.......#.#...#...#.#.....#.#...#.#
#.###.###.###########.#######.#####.#.#.###.#.#######.#.#.#####.#.#####.###.#.#.#
#.....#.#...........#...#...#.....#.#.#.#.S.#...#...#.#.#.....#.#.#...#...#.#.#.#
#######.###########.###.#.#.#####.#.#.#.#.###.###.#.###.###.###M#.#.#.###.###.#.#
#.......#.....#...#...#.#.#.....#...#...#...#.#...#.......#.#.#.#...#.#.#.....#.#
#.#.#####.#.#.###.#####.#.#####.#######.###.#.#.#####.#####.#.#.#####.#.###.#####
#.#.....#.#.#.......#.....#...#.......#.#..l#.#.....#.#.....#.#.#...C.#.....#...#
#.#####.#.#.#######.#.#####.#.#####.###.#.#####.###.#.#.#####.#.#.#########.#.#.#
#.#...#z#.#.#.....#.#...#...#.....#.....#.....#.#..w#.#.#...#...#.#.......#.#.#.#
#.#.#J#.#.#.#.#####.###.#.#######.###########.#.#.#####.#.#.#####.#.#####.###.#.#
#.#.#.#...#.#.#.....#...#...#...#.....#.#.....#.#.....#...#...#...#.....#...#.#.#
###.#.#####.#.#.#####.#####.#.###.###.#.#.#####.#####.#######.#.#######.###.#.#.#
#...#.....#.#...#.#...#.#...#...#...#.#.#a#.....#.........#.#.#.......#.#.#...#n#
#.#######.#.#.###.#Q###.#.#####P###.#.#.#.#######.#######.#.#.#.###.###.#.#####.#
#.#.........#.....#.#...#...#...#.#.#...#.#...#...#.....#.#.#.#...#.#.....#...#.#
#.#################.#.#.###.#.#.#.#.#####.#.#.#.###.###.#.#.#.#####.#.#####.#.#.#
#.#.........#.....#.#.#.#.....#...#.....#...#.#.#.#...#.....#.....#.....#...#...#
#.#.#######.#.###.#.###.#.#######.#####.#####.#.#.###.###########.#######.#######
#...#.....#.#.#.#.#...#...#.....#...#.#.#...#...#...#...#.#.....#.#.....#...#...#
#.#####.###.#.#.#.###.#####.###.###.#.#.#.#######.#####.#.#.###.#.#.###.#.#.#.#.#
#...#...#...#.#.#...#.#.....#.#.#.....#.#.......#.....#...#.#.#...#...#.#.#...#.#
###.#.#.#.###.#.#.###.#.#####.#.#######.#.#####.#.###.###.#.#.#######.#.#######.#
#.....#.#.......#....t..#......u........#.....#..h..#...E.#...........#.........#
################################################################################# """


data_ = """########################
#@..............ac.GI.b#
###d#e#f################
###A#B#C################
###g#h#i################
########################"""


data_ = """#############
#g#f.D#..h#l#
#F###e#E###.#
#dCba@#@BcIJ#
#############
#nK.L@#@G...#
#M###N#H###.#
#o#m..#i#jk.#
#############"""

m = {}

cpos = []

to_collect = []

for x, l in enumerate(data.split('\n')):
    for y, i in enumerate(l):
        m[(x, y)] = i

        if i == '@':
            cpos.append((x, y))
            m[(x, y)] = '.'

        if ord('a') <= ord(i) <= ord('z'):
            to_collect.append(i)


print(cpos)
print(to_collect)

import copy
import collections

mapping = {}


for from_key in ['1', '2', '3', '4'] + to_collect:

    if from_key == '1':
        pos = cpos[0]

    if from_key == '2':
        pos = cpos[1]

    if from_key == '3':
        pos = cpos[2]

    if from_key == '4':
        pos = cpos[3]

    for k, v in m.items():
        if v == from_key:
            pos = k

    queue = [(pos, 0, [])]
    pot_dests = {}
    mdist = {}
    needed_ = {}

    while queue:

        tpos, tdist, needed = queue.pop(0)

        for test_pos in [(tpos[0] + 1, tpos[1]), (tpos[0] - 1, tpos[1]), (tpos[0], tpos[1] + 1), (tpos[0], tpos[1] - 1)]:

            if test_pos not in m:
                continue

            if m[test_pos] == '#':
                continue

            if test_pos in mdist and mdist[test_pos] < tdist + 1:
                continue

            if ord('a') <= ord(m[test_pos]) <= ord('z'):
                pot_dests[m[test_pos]] = (tdist + 1, test_pos, copy.deepcopy(needed))

            if ord('A') <= ord(m[test_pos]) <= ord('Z'):
                nneeded = copy.deepcopy(needed)
                nneeded.append(m[test_pos])
            else:
                nneeded = needed

            queue.append((test_pos, tdist + 1, nneeded))
            mdist[test_pos] = tdist + 1


    mapping[from_key] = pot_dests

print(mapping)

cache = {}



def find_opti(ckeys, collected, to_add, d):

    # print(' '.join(d))

    k = ''.join(ckeys) + '->' + ''.join(sorted(collected))

    global cache

    if k in cache:
        # print("Cache {} {} = {}+{}".format(collected, k, cache[k], to_add))
        return cache[k] + to_add

    global to_collect

    if len(collected) == len(to_collect):
        # print("All collected, r={}".format(to_add))
        return to_add

    best_score = 999999999999999999999999
    b_score = 99999999999999999999

    xx = 0

    for ckeyindex, ckey in enumerate(ckeys):

        for dest, (score, dpos, needed) in mapping[ckey].items():

            if dest in collected:
                continue

            ok = True
            for n in needed:
                if n.lower() not in collected:
                    ok = False
                    break

            if not ok:
                continue

            ncollected = copy.deepcopy(collected)
            ncollected.append(dest)

            new_d = copy.deepcopy(d)

            new_d.append('{} {}/{}'.format(dest, xx, len(mapping[ckey].items())))

            newckey = copy.deepcopy(ckeys)

            newckey[ckeyindex] = dest

            test_score = find_opti(newckey, ncollected, score, new_d)

            # print("Going {} mean {}".format(dest, test_score))

            if test_score < best_score:
                best_score = test_score
                b_score = score

            xx += 1

    # print("Opti {} = {}".format(k, b_score))

    cache[k] = best_score

    return best_score + to_add

print(find_opti(['1', '2', '3', '4'], [], 0, []))

#
# unvisied = ['@'] + to_collect
# dists = collections.defaultdict(lambda: 99999999999999999)
#
# dists['@'] = 0
#
# ttdist = 0
#
# while unvisied:
#     m = 99999999999999999
#     node = None
#
#     for x in unvisied:
#         if dists[x] < m:
#             m = dists[x]
#             node = x
#
#     unvisied.remove(node)
#
#     print(node)
#
#     ttdist += dists[node]
#
#     for dest, (score, dpos, needed) in mapping[node].items():
#
#         ok = True
#         for n in needed:
#             if n.lower() in unvisied:
#                 ok = False
#                 break
#
#         if not ok:
#             continue
#
#         if dists[dest] > dists[node] + score:
#             dists[dest] = dists[node] + score
#
# print(ttdist)
#
# q = ['@']
# d = ['@']
#
# while q:
#     x = q.pop()
#


